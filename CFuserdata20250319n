AWSTemplateFormatVersion: '2010-09-09'
Description: deploying Windows Server AMI by dios-tech,llc Charles Wiggins
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Amazon EC2
        Parameters:
          - KeyPairName
Parameters:
  TestVPCStack:
    Description: Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.
    Type: String
  TestInstanceType:
    Description: Specifies the type of EC2 to build
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
  TestTrafficType:
    Description: The type of traffic to log.
    Type: String
    Default: REJECT
    AllowedValues:
      - ACCEPT
      - REJECT
      - ALL
Resources:
  TestSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDP Security Group
      GroupName: BigPictureRdpSecGroup
      SecurityGroupIngress:
        - CidrIp: 71.163.120.33/32
          Description: Allow all into 3389
          FromPort: 3389
          IpProtocol: tcp
          ToPort: 3389
      Tags:
        - Key: Purpose
          Value: BigPicture
      VpcId: !Ref TestVPC
  TestMachine:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0ea0cb2b0c1e818ee
      InstanceType: !Ref TestInstanceType
UserData:
  Fn::Base64: !Sub |
    <powershell>

      #cloud-config
      write_files:
        - path: C:\aws_userdata.ps1
          content: |
            $bucketName = "cawnotepadbucket"
            $fileName = "googlechromestandaloneenterprise64.msi"
            $destinationPath = "C:\Temp\$fileName"

            if (-Not (Test-Path "C:\Program Files\Amazon\AWSCLIV2\aws.exe")) {
                Start-Process msiexec.exe -ArgumentList "/i https://awscli.amazonaws.com/AWSCLIV2.msi /quiet" -Wait
            }

            Start-Sleep -Seconds 10

            $destinationDir = Split-Path -Parent $destinationPath
            if (-Not (Test-Path $destinationDir)) {
                New-Item -ItemType Directory -Path $destinationDir -Force
            }

            aws s3 cp "s3://$bucketName/$fileName" "$destinationPath"

            if (Test-Path "$destinationPath") {
                Write-Output "File downloaded successfully to $destinationPath"
            } else {
                Write-Output "File download failed"
      runcmd:
        - powershell -ExecutionPolicy Bypass -File C:\aws_userdata.ps1
    </powershell>
      KeyName: caw-dios
      Tags:
        - Key: Purpose
          Value: BigPicture
      NetworkInterfaces:
        - DeviceIndex: '0'
          Description: Adapter 1
          SubnetId: !Ref Subnet
          AssociatePublicIpAddress: true
          GroupSet:
            - !Ref TestSecurityGroup
  TestInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Purpose
          Value: BigPicture
  TestAttachIG:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref TestInternetGateway
      VpcId: !Ref TestVPC
  TestRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TestVPC
      Tags:
        - Key: Purpose
          Value: BigPicture
  TestRoute:
    Type: AWS::EC2::Route
    Properties:
      GatewayId: !Ref TestInternetGateway
      RouteTableId: !Ref TestRouteTable
      DestinationCidrBlock: 0.0.0.0/0
  TestVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/24
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Purpose
          Value: BigPicture
  TestSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref TestRouteTable
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 192.168.0.0/28
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Purpose
          Value: BigPicture
      VpcId: !Ref TestVPC
